{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport uuidv4 from 'uuid/v4';\n\nvar AnnouncerMessage = function (_Component) {\n  _inherits(AnnouncerMessage, _Component);\n\n  function AnnouncerMessage() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, AnnouncerMessage);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.announce = function () {\n      var _this$props = _this.props,\n          message = _this$props.message,\n          ariaLive = _this$props['aria-live'],\n          announceAssertive = _this$props.announceAssertive,\n          announcePolite = _this$props.announcePolite;\n\n      if (ariaLive === 'assertive') {\n        announceAssertive(message || '', uuidv4());\n      }\n\n      if (ariaLive === 'polite') {\n        announcePolite(message || '', uuidv4());\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  AnnouncerMessage.prototype.componentDidMount = function componentDidMount() {\n    this.announce();\n  };\n\n  AnnouncerMessage.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var message = this.props.message;\n\n    if (message !== prevProps.message) {\n      this.announce();\n    }\n  };\n\n  AnnouncerMessage.prototype.componentWillUnmount = function componentWillUnmount() {\n    var _props = this.props,\n        clearOnUnmount = _props.clearOnUnmount,\n        announceAssertive = _props.announceAssertive,\n        announcePolite = _props.announcePolite;\n\n    if (clearOnUnmount === true || clearOnUnmount === 'true') {\n      announceAssertive('');\n      announcePolite('');\n    }\n  };\n\n  AnnouncerMessage.prototype.render = function render() {\n    return null;\n  };\n\n  return AnnouncerMessage;\n}(Component);\n\nAnnouncerMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  message: PropTypes.string.isRequired,\n  'aria-live': PropTypes.string.isRequired,\n  clearOnUnmount: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['true', 'false'])]),\n  announceAssertive: PropTypes.func,\n  announcePolite: PropTypes.func\n} : {};\nexport default AnnouncerMessage;","map":null,"metadata":{},"sourceType":"module"}